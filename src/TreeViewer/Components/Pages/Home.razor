@implements IAsyncDisposable
@page "/"
@rendermode InteractiveServer
@inject HomeViewModel ViewModel
@inject IJSRuntime JS

<RadzenLayout Style="user-select: none">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
            <RadzenSidebarToggle Click="() => toggleExpanded = !toggleExpanded" />
            <RadzenText>Tree No.</RadzenText>
            <RadzenNumeric TValue="int" Min="1" Max="Math.Max(ViewModel.MaxTreeIndex.Value, 1)" @bind-Value="ViewModel.TreeIndex.Value" Disabled="@(ViewModel.MaxTreeIndex.Value == 0)" Style="width: 50px" />
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0">
                <RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenRadioButtonList TValue="SelectionMode" @bind-Value="ViewModel.SelectionTarget.Value">
                            <Items>
                                <RadzenRadioButtonListItem Text="Node" Value="SelectionMode.Node" />
                                <RadzenRadioButtonListItem Text="Clade" Value="SelectionMode.Clade" />
                                <RadzenRadioButtonListItem Text="Taxa" Value="SelectionMode.Taxa" />
                            </Items>
                        </RadzenRadioButtonList>
                    </RadzenStack>
                </RadzenStack>
                <RadzenText>Selection Mode</RadzenText>
            </RadzenStack>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar Responsive="false" @bind-Expanded="toggleExpanded" Style="width: 300px">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Stretch" Gap="1">
            @* Layout *@
            <RadzenPanel AllowCollapse="true">
                <HeaderTemplate>
                    <RadzenText TextStyle="TextStyle.H6">Layout</RadzenText>
                </HeaderTemplate>
                <ChildContent>
                </ChildContent>
            </RadzenPanel>
            @* Tree *@
            <RadzenPanel AllowCollapse="true" Collapsed="defaultCollapsed">
                <HeaderTemplate>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="10">
                        <RadzenText TextStyle="TextStyle.H6">Tree</RadzenText>
                    </RadzenStack>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Style="padding-top: 3px">
                            <RadzenText Style="@sidebarFormLabelStyle">Scale X:</RadzenText>
                            <RadzenText Style="@sidebarFormLabelStyle">Scale Y:</RadzenText>
                            <RadzenText Style="@sidebarFormLabelStyle">Branch thickness:</RadzenText>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                            <RadzenSlider TValue="int" Min="10" Max="3000" Step="10" @bind-Value="ViewModel.XScale.Value" Style="@sidebarFormValueStyle" />
                            <RadzenSlider TValue="int" Min="1" Max="300" @bind-Value="ViewModel.YScale.Value" Style="@sidebarFormValueStyle" />
                            <RadzenNumeric TValue="int" Min="1" @bind-Value="ViewModel.BranchThickness.Value" Style="@sidebarFormValueStyle" />
                        </RadzenStack>
                    </RadzenStack>
                </ChildContent>
            </RadzenPanel>
            @* Search *@
            <RadzenPanel AllowCollapse="true" Collapsed="defaultCollapsed">
                <HeaderTemplate>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="10">
                        <RadzenText TextStyle="TextStyle.H6">Search</RadzenText>
                    </RadzenStack>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenTextBox @bind-Value="ViewModel.SearchQuery.Value" Style="width: 220px; height: 30px" />
                        <RadzenButton Icon="search" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Text" Click="ViewModel.SearchCommand.ToDelegate()" />
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch" Style="padding-top: 3px">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                            <RadzenText Style="@sidebarFormLabelStyle">Target:</RadzenText>
                            <RadzenText Style="@sidebarFormLabelStyle">Ignore case:</RadzenText>
                            <RadzenText Style="@sidebarFormLabelStyle">Use regex:</RadzenText>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                            <RadzenDropDown Data="Enum.GetValues<TreeSearchTarget>()" @bind-Value="ViewModel.SearchTarget.Value" Style="@sidebarFormValueStyle" />
                            <RadzenCheckBox TValue="bool" @bind-Value="ViewModel.SearchOnIgnoreCase.Value" Style="margin-top: 2px; margin-bottom: 2px" />
                            <RadzenCheckBox TValue="bool" @bind-Value="ViewModel.SearchWithRegex.Value" Style="margin-top: 2px; margin-bottom: 2px" />
                        </RadzenStack>
                    </RadzenStack>
                </ChildContent>
            </RadzenPanel>
            @* Leaves *@
            <RadzenPanel AllowCollapse="true" Collapsed="defaultCollapsed">
                <HeaderTemplate>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="10">
                        <RadzenCheckBox TValue="bool" @bind-Value="ViewModel.ShowLeafLabels.Value" />
                        <RadzenText TextStyle="TextStyle.H6">Leaves</RadzenText>
                    </RadzenStack>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch" Style="padding-top: 3px">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                            <RadzenText Style="@sidebarFormLabelStyle">Font size:</RadzenText>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                            <RadzenNumeric TValue="int" Min="1" @bind-Value="ViewModel.LeafLabelsFontSize.Value" Style="@sidebarFormValueStyle" />
                        </RadzenStack>
                    </RadzenStack>
                </ChildContent>
            </RadzenPanel>
            @* Node values *@
            <RadzenPanel AllowCollapse="true" Collapsed="defaultCollapsed">
                <HeaderTemplate>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch" Gap="10">
                        <RadzenCheckBox TValue="bool" @bind-Value="ViewModel.ShowNodeValues.Value" />
                        <RadzenText TextStyle="TextStyle.H6">Node values</RadzenText>
                    </RadzenStack>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Style="padding-top: 3px">
                            <RadzenText Style="@sidebarFormLabelStyle">Value:</RadzenText>
                            <RadzenText Style="@sidebarFormLabelStyle">Font size:</RadzenText>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                            <RadzenDropDown TValue="CladeValueType" Data="Enum.GetValues<CladeValueType>()" @bind-Value="ViewModel.NodeValueType.Value" Style="@sidebarFormValueStyle" />
                            <RadzenNumeric TValue="int" Min="1" @bind-Value="ViewModel.NodeValueFontSize.Value" Style="@sidebarFormValueStyle" />
                        </RadzenStack>
                    </RadzenStack>
                </ChildContent>
            </RadzenPanel>
            @* Branch values *@
            <RadzenPanel AllowCollapse="true" Collapsed="defaultCollapsed">
                <HeaderTemplate>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch" Gap="10">
                        <RadzenCheckBox TValue="bool" @bind-Value="ViewModel.ShowBranchValues.Value" />
                        <RadzenText TextStyle="TextStyle.H6">Branch values</RadzenText>
                    </RadzenStack>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Style="padding-top: 3px">
                            <RadzenText Style="@sidebarFormLabelStyle">Value:</RadzenText>
                            <RadzenText Style="@sidebarFormLabelStyle">Font size:</RadzenText>
                            <RadzenText Style="@sidebarFormLabelStyle">Hide pattern:</RadzenText>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                            <RadzenDropDown TValue="CladeValueType" Data="Enum.GetValues<CladeValueType>()" @bind-Value="ViewModel.BranchValueType.Value" Style="@sidebarFormValueStyle" />
                            <RadzenNumeric TValue="int" Min="1" @bind-Value="ViewModel.BranchValueFontSize.Value" Style="@sidebarFormValueStyle" />
                            <RadzenTextBox @bind-Value="ViewModel.BranchValueHideRegexPattern.Value" Style="@sidebarFormValueStyle" />
                        </RadzenStack>
                    </RadzenStack>
                </ChildContent>
            </RadzenPanel>
            @* Branch decorations *@
            <RadzenPanel AllowCollapse="true" Collapsed="defaultCollapsed">
                <HeaderTemplate>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch" Gap="10">
                        <RadzenCheckBox TValue="bool" @bind-Value="ViewModel.ShowBranchDecorations.Value" />
                        <RadzenText TextStyle="TextStyle.H6">Branch decorations</RadzenText>
                    </RadzenStack>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenButton Icon="add" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Text" Click="ViewModel.AddBranchDecorationCommand.ToDelegate()" />
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Stretch">
                        @foreach (BranchDecorationViewModel currentViewModel in ViewModel.BranchDecorations)
                        {
                            <RadzenPanel class="rz-border-radius" AllowCollapse="true" Style="background-color: whitesmoke">
                                <HeaderTemplate>
                                    <RadzenText Style="font-size: 1.1rem">@currentViewModel.TargetRegexPattern.Value</RadzenText>
                                </HeaderTemplate>
                                <ChildContent>
                                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch">
                                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Style="padding-top: 3px">
                                                <RadzenText Style="@sidebarFormLabelStyle">Pattern:</RadzenText>
                                                <RadzenText Style="@sidebarFormLabelStyle">Shape:</RadzenText>
                                                <RadzenText Style="@sidebarFormLabelStyle">Size:</RadzenText>
                                                <RadzenText Style="@sidebarFormLabelStyle">Color:</RadzenText>
                                            </RadzenStack>
                                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                                                <RadzenTextBox @bind-Value="currentViewModel.TargetRegexPattern.Value" Style="@sidebarFormValueStyle" />
                                                <RadzenDropDown TValue="BranchDecorationType" Data="Enum.GetValues<BranchDecorationType>()" @bind-Value="currentViewModel.DecorationType.Value" Style="@sidebarFormValueStyle" />
                                                <RadzenNumeric TValue="int" Min="1" @bind-Value="currentViewModel.ShapeSize.Value" Style="@sidebarFormValueStyle" />
                                                <RadzenColorPicker @bind-Value="currentViewModel.ShapeColor.Value" Style="@sidebarFormValueStyle" />
                                            </RadzenStack>
                                        </RadzenStack>
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                            <RadzenButton Icon="@(currentViewModel.Visible.Value ? "visibility" : "visibility_off")" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Text" Click="x => currentViewModel.Visible.Value = !currentViewModel.Visible.Value" />
                                            <RadzenButton Icon="delete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Text" Click="currentViewModel.DeleteSelfCommand.ToDelegate()" />
                                        </RadzenStack>
                                    </RadzenStack>
                                </ChildContent>
                            </RadzenPanel>
                        }
                    </RadzenStack>
                </ChildContent>
            </RadzenPanel>
            @* Scale bar *@
            <RadzenPanel AllowCollapse="true" Collapsed="defaultCollapsed">
                <HeaderTemplate>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="10">
                        <RadzenCheckBox TValue="bool" @bind-Value="ViewModel.ShowScaleBar.Value" />
                        <RadzenText TextStyle="TextStyle.H6">Scale bar</RadzenText>
                    </RadzenStack>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Style="padding-top: 3px">
                            <RadzenText Style="@sidebarFormLabelStyle">Value:</RadzenText>
                            <RadzenText Style="@sidebarFormLabelStyle">Font size:</RadzenText>
                            <RadzenText Style="@sidebarFormLabelStyle">Bar thickness:</RadzenText>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                            <RadzenNumeric TValue="double" Min="0" Step="0.1" @bind-Value="ViewModel.ScaleBarValue.Value" Style="@sidebarFormValueStyle" />
                            <RadzenNumeric TValue="int" Min="1" @bind-Value="ViewModel.ScaleBarFontSize.Value" Style="@sidebarFormValueStyle" />
                            <RadzenNumeric TValue="int" Min="1" @bind-Value="ViewModel.ScaleBarThickness.Value" Style="@sidebarFormValueStyle" />
                        </RadzenStack>
                    </RadzenStack>
                </ChildContent>
            </RadzenPanel>
        </RadzenStack>
    </RadzenSidebar>
    <RadzenBody>
        <RadzenSplitter Orientation="Orientation.Horizontal">
            <RadzenSplitterPane Size="calc(100% - 300px)" Style="overflow: scroll">
                @if (ViewModel.TargetTree.Value is not null)
                {
                    Configurations config = Configurations.LoadOrCreate();

                    Tree tree = ViewModel.TargetTree.Value;
                    ViewModel.ApplyTreeStyle(tree);
                    positionManager.Reset(tree);

                    (double svgWidth, double svgHeight) = positionManager.CalcDocumentSize();

                    <svg width="@svgWidth" height="@svgHeight">
                        <style type="text/css">
                            text {
                                font-family: Arial, Helvetica, sans-serif;
                            }

                            .leaf {
                                font-size: @(ViewModel.LeafLabelsFontSize.Value + "px");
                            }

                            .node-value {
                                font-size: @(ViewModel.NodeValueFontSize.Value + "px");
                            }

                            .branch-value {
                                font-size: @(ViewModel.BranchValueFontSize.Value + "px");
                            }

                            .branch {
                                fill: none;
                                stroke-width: @(ViewModel.BranchThickness.Value + "px");
                            }

                            .scalebar-line {
                                fill: none;
                                stroke: black;
                                stroke-width: @(ViewModel.ScaleBarThickness.Value + "px");
                            }

                            .scalebar-text {
                                font-size: @(ViewModel.ScaleBarFontSize.Value + "px");
                            }

                            .clickable-leaf {
                                stroke: none;
                            }

                            .clickable-branch {
                                fill: none;
                            }
                        </style>
                        <rect width="100%" height="100%" style="fill: transparent; stroke: none" onclick="@ViewModel.UnfocusAllCommand.ToDelegate()" />
                        <g transform="translate(50, 50)">
                            @foreach (Clade current in tree.GetAllClades())
                            {
                                if (current.IsLeaf)
                                {
                                    // 系統名
                                    if (tree.Style.ShowLeafLabels && !string.IsNullOrEmpty(current.Taxon))
                                    {
                                        (double x, double y) = positionManager.CalcLeafPosition(current);

                                        var svgText = new MarkupString($"<text class=\"leaf\" x=\"{x}\" y=\"{y}\" style=\"fill: {current.Style.LeafColor}\">{current.Taxon}</text>");
                                        @svgText

                                        // クリックエリア
                                        string id = current.GetId("leaf");
                                        string fillColor = ViewModel.FocusedSvgElementIdList.Contains(id) ? "#A0D8EFC4" : "transparent";
                                        double width = current.Taxon.Length * ViewModel.LeafLabelsFontSize.Value / 2;
                                        double height = ViewModel.LeafLabelsFontSize.Value;

                                        <rect id="@id" class="clickable-leaf" x="@(x - 2)" y="@(positionManager.CalcY1(current) - ViewModel.LeafLabelsFontSize.Value / 2.5 - 2)" width="@width" height="@height"
                                              style="fill: @fillColor" onclick="@ViewModel.SvgElementClickedCommand.ToDelegate(id)" />
                                    }
                                }
                                else
                                {
                                    // 結節点の値
                                    @if (ViewModel.ShowNodeValues.Value)
                                    {
                                        string nodeValue = SelectShowValue(current, ViewModel.NodeValueType.Value);
                                        if (nodeValue.Length > 0)
                                        {
                                            (double x, double y) = positionManager.CalcNodeValuePosition(current);

                                            var svgText = new MarkupString($"<text class=\"node-value\" x=\"{x}\" y=\"{y}\" style=\"fill: {current.Style.BranchColor}\">{nodeValue}</text>");
                                            @svgText
                                        }
                                    }
                                }

                                if (current.BranchLength > 0)
                                {
                                    // 横棒
                                    {
                                        (double xParent, double xChild, double y) = positionManager.CalcHorizontalBranchPositions(current);

                                        string stroke;
                                        if (config.BranchColoring is BranchColoringType.Both or BranchColoringType.Horizontal) stroke = current.Style.BranchColor;
                                        else stroke = "black";
                                        <line class="branch" x1="@xParent" y1="@y" x2="@xChild" y2="@y" style="stroke: @(stroke)" />
                                    }

                                    // 枝の装飾
                                    if (ViewModel.ShowBranchDecorations.Value && !string.IsNullOrEmpty(current.Supports))
                                        foreach (BranchDecorationStyle currentDecoration in tree.Style.DecorationStyles.Where(x => x.Enabled && (x.Regex?.IsMatch(current.Supports) ?? false)))
                                        {
                                            string color = currentDecoration.ShapeColor;

                                            switch (currentDecoration.DecorationType)
                                            {
                                                case BranchDecorationType.ClosedCircle:
                                                case BranchDecorationType.OpenCircle:
                                                    {
                                                        (double centerX, double centerY, double radius) = positionManager.CalcBranchDecorationCircleArea(current, currentDecoration);

                                                        string fill, stroke;
                                                        if (currentDecoration.DecorationType == BranchDecorationType.ClosedCircle)
                                                        {
                                                            fill = color;
                                                            stroke = "none";
                                                        }
                                                        else
                                                        {
                                                            fill = "white";
                                                            stroke = color;
                                                        }

                                                        <circle cx="@centerX" cy="@centerY" r="@radius" style="stroke: @stroke; fill: @fill" />
                                                    }
                                                    break;
                                                case BranchDecorationType.ClosedRectangle:
                                                case BranchDecorationType.OpenedRectangle:
                                                    {
                                                        (double x, double y, double width, double height) = positionManager.CalcBranchDecorationRectangleArea(current, currentDecoration);

                                                        string fill, stroke;
                                                        if (currentDecoration.DecorationType == BranchDecorationType.ClosedRectangle)
                                                        {
                                                            fill = color;
                                                            stroke = "none";
                                                        }
                                                        else
                                                        {
                                                            fill = "white";
                                                            stroke = color;
                                                        }

                                                        <rect x="@x" y="@y" width="@width" height="@height" style="stroke: @stroke; fill: @fill" />
                                                    }
                                                    break;
                                            }
                                        }

                                    // 二分岐の値
                                    if (ViewModel.ShowBranchValues.Value)
                                    {
                                        string branchValue = SelectShowValue(current, ViewModel.BranchValueType.Value);
                                        if (branchValue.Length > 0 && (!tree.Style.BranchValueHideRegex?.IsMatch(branchValue) ?? true))
                                        {
                                            (double x, double y) = positionManager.CalcBranchValuePosition(current);

                                            var svgText = new MarkupString($"<text class=\"branch-value\" x=\"{x}\" y=\"{y}\" text-anchor=\"middle\" style=\"fill: {current.Style.BranchColor}\">{branchValue}</text>");
                                            @svgText
                                        }
                                    }
                                }

                                Clade? parent = current.Parent;
                                if (parent is not null)
                                {
                                    if (parent.Children.Count > 1)
                                    {
                                        (double x, double yParent, double yChild) = positionManager.CalcVerticalBranchPositions(current);

                                        // 縦棒
                                        if (yParent != yChild)
                                        {
                                            string stroke;
                                            if (config.BranchColoring is BranchColoringType.Both or BranchColoringType.Vertical) stroke = current.Style.BranchColor;
                                            else stroke = "black";
                                            <line class="branch" x1="@x" y1="@yParent" x2="@x" y2="@yChild" style="stroke: @stroke" />
                                        }
                                    }
                                }

                                // 枝クリックエリア
                                {
                                    double x2 = positionManager.CalcX2(current);

                                    if (!double.IsNaN(x2))
                                    {
                                        double x1 = positionManager.CalcX1(current);
                                        double y1 = positionManager.CalcY1(current);
                                        double y2 = positionManager.CalcY2(current);

                                        string path = $"M {x2} {y1}";
                                        if (x1 != x2) path += $"H {x1}";
                                        if (y1 != y2) path += $"V {y2}";

                                        string id = current.GetId("branch");
                                        string strokeColor = ViewModel.FocusedSvgElementIdList.Contains(id) ? "#A0D8EFC4" : "transparent";

                                        <path id="@id" class="clickable-branch" d="@path"
                                              style="stroke: @strokeColor; stroke-width: @(ViewModel.BranchThickness.Value + 4)"
                                              onclick="@ViewModel.SvgElementClickedCommand.ToDelegate(id)" />
                                    }
                                }
                            }
                        </g>

                        // Scale bar
                        @if (ViewModel.ShowScaleBar.Value && ViewModel.ScaleBarValue.Value > 0)
                        {
                            (double offsetX, double offsetY) = positionManager.CalcScaleBarOffset();
                            ((double xLeft, double xRight, double y) line, (double x, double y) text) = positionManager.CalcScaleBarPositions();

                            <g transform="translate(@offsetX, @offsetY)">
                                <text class="scalebar-text" x="@(text.x)" y="@(text.y)" text-anchor="middle">@ViewModel.ScaleBarValue.Value</text>
                                <line class="scalebar-line" x1="@(line.xLeft)" y1="@(line.y)" x2="@(line.xRight)" y2="@(line.y)" />
                            </g>
                        }
                    </svg>
                }
            </RadzenSplitterPane>
            <RadzenSplitterPane Size="300px">
                <StyleSidebar ViewModel="ViewModel.StyleSidebarViewModel" />
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenBody>
</RadzenLayout>

@code {
    private bool toggleExpanded = true;
    private IJSObjectReference? jsModule;

    private const bool defaultCollapsed = false;

    private const string sidebarFormLabelStyle = "width: 150px; height: 23px";
    private const string sidebarFormValueStyle = "width: 100px; height: 30px";

    private readonly PositionManager positionManager = new();

    private string SelectShowValue(Clade clade, CladeValueType valueType)
    {
        switch (valueType)
        {
            case CladeValueType.Supports:
                string supports = clade.Supports ?? string.Empty;
                return supports.Trim();
            case CladeValueType.BranchLength:
                double branchLength = clade.BranchLength;
                if (double.IsNaN(branchLength)) return string.Empty;
                return branchLength.ToString();

            default: return string.Empty;
        }
    }

    /// <inheritdoc/>
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ViewModel.PropertyChanged += (x, y) => InvokeAsync(StateHasChanged);
    }

    /// <inheritdoc/>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Home.razor.js");
            await jsModule.InvokeVoidAsync("bypassShortcuts", DotNetObjectReference.Create(this));
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
            try
            {
                await jsModule.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
    }

    /// <summary>
    /// プロジェクトを新規作成します。。
    /// </summary>
    [JSInvokable]
    public void CreateNew()
    {
        ViewModel.CreateNewCommand.Execute();
    }

    /// <summary>
    /// 全てを選択します。
    /// </summary>
    [JSInvokable]
    public void FocusAll()
    {
        ViewModel.FocusAllCommand.Execute();
    }
}
