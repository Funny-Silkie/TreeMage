@implements IAsyncDisposable
@page "/"
@rendermode InteractiveServer
@inject HomeViewModel ViewModel
@inject IJSRuntime JS

<RadzenLayout Style="user-select: none">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
            <RadzenSidebarToggle Click="() => toggleExpanded = !toggleExpanded" />
            <RadzenText>Tree No.</RadzenText>
            <RadzenNumeric TValue="int" Min="1" Max="Math.Max(ViewModel.MaxTreeIndex.Value, 1)" @bind-Value="ViewModel.TreeIndex.Value" Disabled="@(ViewModel.MaxTreeIndex.Value == 0)" Style="width: 50px" />
            <RadzenRadioButtonList TValue="TreeEditMode" @bind-Value="ViewModel.EditMode.Value">
                <Items>
                    <RadzenRadioButtonListItem Text="Select" Value="TreeEditMode.Select" />
                    <RadzenRadioButtonListItem Text="Reroot" Value="TreeEditMode.Reroot" />
                    <RadzenRadioButtonListItem Text="Swap" Value="TreeEditMode.Swap" />
                    <RadzenRadioButtonListItem Text="Subtree" Value="TreeEditMode.Subtree" />
                </Items>
            </RadzenRadioButtonList>
            @if (ViewModel.EditMode.Value == TreeEditMode.Select)
            {
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0">
                    <RadzenStack>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                            <RadzenRadioButtonList TValue="SelectionMode" @bind-Value="ViewModel.SelectionTarget.Value">
                                <Items>
                                    <RadzenRadioButtonListItem Text="Node" Value="SelectionMode.Node" />
                                    <RadzenRadioButtonListItem Text="Clade" Value="SelectionMode.Clade" />
                                    <RadzenRadioButtonListItem Text="Taxa" Value="SelectionMode.Taxa" />
                                </Items>
                            </RadzenRadioButtonList>
                        </RadzenStack>
                    </RadzenStack>
                    <RadzenText>Selection Mode</RadzenText>
                </RadzenStack>
            }
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar Responsive="false" @bind-Expanded="toggleExpanded" Style="width: 300px">
        <TreeEditSidebar />
    </RadzenSidebar>
    <RadzenBody>
        <RadzenSplitter Orientation="Orientation.Horizontal">
            <RadzenSplitterPane Size="calc(100% - 300px)" Style="overflow: scroll">
                <TreeView ViewModel="ViewModel" />
            </RadzenSplitterPane>
            <RadzenSplitterPane Size="300px">
                <div style="margin: 5px">
                    <StyleSidebar />
                </div>
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenBody>
</RadzenLayout>

@code {
    private bool toggleExpanded = true;
    private IJSObjectReference? jsModule;

    /// <inheritdoc/>
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ViewModel.PropertyChanged += (x, y) => InvokeAsync(StateHasChanged);
    }

    /// <inheritdoc/>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Home.razor.js");
            await jsModule.InvokeVoidAsync("registerEvents", DotNetObjectReference.Create(this));
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
            try
            {
                await jsModule.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
    }

    /// <summary>
    /// ウィンドウを閉じるかどうかを確認します。
    /// </summary>
    /// <returns>閉じても良い場合は<see langword="true"/>，それ以外で<see langword="false"/></returns>
    [JSInvokable]
    public async Task<bool> VerifyCanClose()
    {
        return await ViewModel.VerifyCanClose();
    }

    /// <summary>
    /// ファイルがドロップされた時に実行されます。
    /// </summary>
    /// <param name="pathes">ファイルパス</param>
    [JSInvokable]
    public async Task FileDropped(string[] pathes)
    {
        await ViewModel.FileDroppedCommand.ExecuteAsync(pathes);
    }

    /// <summary>
    /// プロジェクトを新規作成します。
    /// </summary>
    [JSInvokable]
    public async Task CreateNew()
    {
        await ViewModel.CreateNewCommand.ExecuteAsync();
    }

    /// <summary>
    /// undoを実行します。
    /// </summary>
    [JSInvokable]
    public async Task Undo()
    {
        await ViewModel.UndoCommand.ExecuteAsync();
    }

    /// <summary>
    /// redoを実行します。
    /// </summary>
    [JSInvokable]
    public async Task Redo()
    {
        await ViewModel.RedoCommand.ExecuteAsync();
    }

    /// <summary>
    /// 全てを選択します。
    /// </summary>
    [JSInvokable]
    public async Task FocusAll()
    {
        await ViewModel.FocusAllCommand.ExecuteAsync();
    }
}
