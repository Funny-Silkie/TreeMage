@inject StyleSidebarViewModel ViewModel

<RadzenStack Orientation="Orientation.Vertical">
    <RadzenText TextStyle="TextStyle.DisplayH6">@SR.COMPONENT_STYLESIDEBAR_TITLE</RadzenText>
    @if (ViewModel.IsEnable.Value && ViewModel.FocusedCount.Value > 0 && ViewModel.FirstSelectedElement.Value.Clade is not null)
    {
        Clade clade = ViewModel.FirstSelectedElement.Value.Clade;
        <RadzenRow AlignItems="AlignItems.Center" Gap="10px">
            <RadzenColumn>
                <RadzenText class="style-sidebar-label">@SR.COMPONENT_STYLESIDEBAR_BRANCH_COLOR:</RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenColorPicker @bind-Value="ViewModel.BranchColor.Value" />
            </RadzenColumn>
        </RadzenRow>
        @if (ViewModel.LeafSelected.Value)
        {
            <RadzenRow AlignItems="AlignItems.Center" Gap="10px">
                <RadzenColumn>
                    <RadzenText class="style-sidebar-label">@SR.COMPONENT_STYLESIDEBAR_LEAF_COLOR:</RadzenText>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenColorPicker @bind-Value="ViewModel.LeafColor.Value" />
                </RadzenColumn>
            </RadzenRow>
        }
        @if (ViewModel.FocusedCount.Value == 1 && ViewModel.SelectionTarget.Value is SelectionMode.Node)
        {
            <RadzenRow AlignItems="AlignItems.Center" Gap="10px">
                <RadzenColumn>
                    <RadzenText class="style-sidebar-label">@SR.COMPONENT_STYLESIDEBAR_CLADE_LABEL:</RadzenText>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenTextBox class="style-sidebar-value" @bind-Value="ViewModel.CladeLabel.Value" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center" Gap="10px">
                <RadzenColumn>
                    <RadzenText class="style-sidebar-label">@SR.COMPONENT_STYLESIDEBAR_SHADE_COLOR:</RadzenText>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenColorPicker @bind-Value="ViewModel.ShadeColor.Value" />
                </RadzenColumn>
            </RadzenRow>
            if (clade.IsLeaf)
            {
                <RadzenRow AlignItems="AlignItems.Center" Gap="10px">
                    <RadzenColumn>
                        <RadzenText class="style-sidebar-label">@SR.COMPONENT_STYLESIDEBAR_LEAF_LABEL:</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenTextBox class="style-sidebar-value" @bind-Value="ViewModel.LeafLabel.Value" />
                    </RadzenColumn>
                </RadzenRow>
            }
            else
            {
                <RadzenRow AlignItems="AlignItems.Center" Gap="10px">
                    <RadzenColumn>
                        <RadzenText class="style-sidebar-label">@SR.COMPONENT_STYLESIDEBAR_SUPPORT_VALUE:</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenTextBox class="style-sidebar-value" @bind-Value="ViewModel.Supports.Value" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center" Gap="10px">
                    <RadzenColumn>
                        <RadzenText class="style-sidebar-label">@SR.COMPONENT_STYLESIDEBAR_YSCALE:</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenNumeric TValue="double" class="style-sidebar-value" Min="0" Step="0.1" @bind-Value="ViewModel.YScale.Value" />
                    </RadzenColumn>
                </RadzenRow>
            }
        }
    }
</RadzenStack>


@code {
    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        ViewModel.PropertyChanged += (_, _) => InvokeAsync(StateHasChanged);
        await Task.CompletedTask;
    }
}
